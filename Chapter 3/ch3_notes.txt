Big O Notation
- used to express the efficiency of an algorithm
- essential question: if there are N data elements, how many steps will an algorithm take?
- describes the upper bound of the growth rate of the function, or worst case scenario of the function
- the "soul" of Big O: how will an algorithm's performance change as the data increases?

Operations & Efficiency
- Efficiency varies, depending on the operation performed, even sometimes when using the same algorithm
or code structure
    - Ex: reading from an array, regardless of size, takes one step
    - Ex: efficiency in searching an array will depend on whether it's sorted or not


Big O Time Complexity, from most to least efficient
- O(1) = one step, regardless of size of N/dataset (constant time; fastest algorithm)
- O(log N) = increase of one step each time N/dataset doubles
    - alternative: the algorithm takes as many steps as it takes to halve the dataset until one element 
    is found
- O(N) = linear time; for N elements, N steps (1:1 proportion)

Logarithms
- the inverse of exponents
- how many times does a number need to be divided by 2 to reach a result of 1?